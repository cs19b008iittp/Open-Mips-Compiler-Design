var Node	{



	int key;



	var Node *left;



	var Node *right;



	int height;



}







int max(int a, int b)	{



        if(a > b){

			 return a;

		}

        else{

			return b;

		}

}







int height(var Node *N)	{



	if (N == NULL){

		return 0;

	}

	return (*N).height;

}





var Node* newNode(int key)	{

	var Node* node;

	node = malloc(sizeof(var Node));

	(*node).key = key;

	(*node).left = NULL;

	(*node).right = NULL;

	(*node).height = 1; 

	return(node);

}







var Node *rightRotate(var Node *y)	{

	var Node *x = (*y).left;

	var Node *T2 = (*x).right;

	(*x).right = y;

	(*y).left = T2;

	int l = height((*y).left);

	int r = height((*y).right);

	int m = max(l,r);

	(*y).height = 1 + m;

	l = height((*x).left);

	r = height((*x).right);

	m = max(l,r);

	(*x).height = 1 + m;

	return x;

}







var Node *leftRotate(var Node *x)	{

	var Node *y = (*x).right;

	var Node *T2 = (*y).left;

	(*y).left = x;

	(*x).right = T2;

	int l = height((*y).left);

	int r = height((*y).right);

	int m = max(l,r);

	(*y).height = 1 + m;

	l = height((*x).left);

	r = height((*x).right);

	m = max(l,r);

	(*x).height = 1 + m;

	return y;

}







int getBalance(var Node *N)	{

	if (N == NULL){

		return 0;

	}

	return height((*N).left) - height((*N).right);

}







var Node* insert(var Node* node, int key)	{

	if (node == NULL){

		return(newNode(key));

	}

	int k = (*node).key;

	if (key < k){

		(*node).left = insert(k, key);

	}



	elif (key > k){

		(*node).right = insert(k, key);

	}



	else{

               return node;

	} 

	int l = height((*node).left);

	int r = height((*node).right);

	int m = max(l,r);

	(*node).height = 1 + m;

	int balance = getBalance(node);



	if (balance > 1 && key < (*((*node).left)).key){

		return rightRotate(node);

	}





	if (balance < -1 && key > (*((*node).right)).key){

		return leftRotate(node);

	}



	if (balance > 1 && key > (*((*node).left)).key)	{

		(*node).left = leftRotate((*node).left);

		return rightRotate(node);

	}



	if (balance < -1 && key < (*((*node).right)).key)	{

		(*node).right = rightRotate((*node).right);

		return leftRotate(node);

	}

	return node;



}







var Node * minValueNode(var Node* node)	{



	var Node* current = node;



	for (;(*current).left != NULL;){

		current = (*current).left;



	}



	return current;



}







var Node* deleteNode(var Node* root, int key)	{



	if (root == NULL){

		return root;

	}



		







	if ( key < (*root).key ){

		(*root).left = deleteNode((*root).left, key);

	}



		



		



	elif( key > (*root).key ){

		(*root).right = deleteNode((*root).right, key);

	}



		







	else	{



		if( ((*root).left == NULL) || ((*root).right == NULL) )	{



			var Node *temp;

			if((*root).left != NULL){

				temp = (*root).left;

			}else{

				temp = (*root).right;

			}



			if (temp == NULL)



			{



				temp = root;



				root = NULL;



			}



			else {

				*root = *temp;

			}



		}



		else	{



			var Node* temp = minValueNode((*root).right);



			(*root).key = (*temp).key;



			(*root).right = deleteNode((*root).right, (*temp).key);



		}



	}







	if (root == NULL){

		return root;

	}



		





	int l = height((*root).left);

	int r = height((*root).right);

	int m = max(l,r);

	(*root).height = 1 + m;







	int balance = getBalance(root);







	if (balance > 1 && getBalance((*root).left) >= 0){

		return rightRotate(root);

	}



		







	if (balance > 1 && getBalance((*root).left) < 0)	{



		(*root).left = leftRotate((*root).left);



		return rightRotate(root);



	}







	if (balance < -1 && getBalance((*root).right) <= 0){

		return leftRotate(root);

	}



		







	if (balance < -1 && getBalance((*root).right) > 0)	{



		(*root).right = rightRotate((*root).right);



		return leftRotate(root);



	}







	return root;



}







void preOrder(var Node *root)	{



	if(root != NULL)	{



		prints((*root).key, " ");



		preOrder((*root).left);



		preOrder((*root).right);



	}



}







void main()	{



var Node *root = NULL;







	root = insert(root, 9);



	root = insert(root, 5);



	root = insert(root, 10);



	root = insert(root, 0);



	root = insert(root, 6);



	root = insert(root, 11);



	root = insert(root, -1);



	root = insert(root, 1);



	root = insert(root, 2);







	print("Preorder traversal of the convared AVL tree is \n");



	preOrder(root);



	print("\nPreorder traversal after deletion of 10 \n");



	preOrder(root);



}



